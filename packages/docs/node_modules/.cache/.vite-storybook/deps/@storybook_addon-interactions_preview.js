import {
  instrument
} from "./chunk-XFGJMA6F.js";
import {
  require_build
} from "./chunk-VI2S7HWG.js";
import {
  require_core_events
} from "./chunk-E62EWPZO.js";
import {
  scope
} from "./chunk-53B3XB6V.js";
import "./chunk-D77VNDYA.js";
import {
  require_preview_api
} from "./chunk-5H5OTQLV.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// ../../node_modules/@storybook/addon-interactions/dist/preview.mjs
var import_preview_api = __toESM(require_preview_api(), 1);
var import_core_events = __toESM(require_core_events(), 1);
var import_jest_mock = __toESM(require_build(), 1);
var JestMock = new import_jest_mock.ModuleMocker(scope);
var fn = JestMock.fn.bind(JestMock);
var { action } = instrument({ action: fn }, { retain: true });
var channel = import_preview_api.addons.getChannel();
var seen = /* @__PURE__ */ new Set();
var spies = [];
channel.on(import_core_events.FORCE_REMOUNT, () => spies.forEach((mock) => {
  var _a;
  return (_a = mock == null ? void 0 : mock.mockClear) == null ? void 0 : _a.call(mock);
}));
channel.on(import_core_events.STORY_RENDER_PHASE_CHANGED, ({ newPhase }) => {
  newPhase === "loading" && spies.forEach((mock) => {
    var _a;
    return (_a = mock == null ? void 0 : mock.mockClear) == null ? void 0 : _a.call(mock);
  });
});
var addSpies = (id, val, key) => {
  if (seen.has(val))
    return val;
  seen.add(val);
  try {
    if (Object.prototype.toString.call(val) === "[object Object]") {
      for (let [k, v] of Object.entries(val))
        val[k] = addSpies(id, v, k);
      return val;
    }
    if (Array.isArray(val))
      return val.map((item, index) => addSpies(id, item, `${key}[${index}]`));
    if (typeof val == "function" && val.isAction) {
      Object.defineProperty(val, "name", { value: key, writable: false }), Object.defineProperty(val, "__storyId__", { value: id, writable: false });
      let spy = action(val);
      return spies.push(spy), spy;
    }
  } catch {
  }
  return val;
};
var addActionsFromArgTypes = ({ id, initialArgs }) => addSpies(id, initialArgs);
var argsEnhancers = [addActionsFromArgTypes];
var { step: runStep } = instrument({ step: (label, play, context) => play(context) }, { intercept: true });
var parameters = { throwPlayFunctionExceptions: false };
export {
  argsEnhancers,
  parameters,
  runStep
};
//# sourceMappingURL=@storybook_addon-interactions_preview.js.map
